# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OEcGH-yD8gLMrofrqTNFFMAgt8CSHI5n
"""

import random
import time

def aleatorio(x, range_inicial, range_final):
    numeros = set()
    while len(numeros) < x:
        num = random.randint(range_inicial, range_final)
        numeros.add(num)
    return list(numeros)

def mover_robo(robo, move, qnt_sala):
    if (move == 'direita') and ((robo + 1) <= qnt_sala - 1):
        return robo + 1
    elif (move == 'esquerda') and ((robo - 1) >= 0):
        return robo - 1
    else:
        return robo

def print_salas(modo, salas, robo):
    if modo == "Full":
        interface = [chr(i + 65) for i in range(len(salas))]
        int_robo = ['-' for _ in range(len(salas))]
        int_robo[robo] = 'X'
        print(interface)
        print(salas)
        print(int_robo)
        print("\n")

def limpa(sala):
    return all(i == '0' for i in sala)

def gulo_oni(sala, robo):
    lixo = [i for i in range(len(sala)) if sala[i] == '1']
    lixo_mais_proximo = None
    distancia_minima = float('inf')

    for l in lixo:
        distancia = abs(l - robo)
        if distancia < distancia_minima:
            distancia_minima = distancia
            lixo_mais_proximo = l

    aux = robo - lixo_mais_proximo
    comandos = []

    if aux < 0:
        comandos.extend(['direita'] * abs(aux))
    elif aux > 0:
        comandos.extend(['esquerda'] * aux)
    else:
        comandos.append("limpar")

    return comandos

def sujeira_espontanea(salas, probabilidade=0.1):
    for i in range(len(salas)):
        if random.random() < probabilidade:
            salas[i] = '1'

def modo_guloso_observavel_com_sujeira_espontanea(sala, robo, qnt_salas):
    print_salas("Full", sala, robo)

    while not limpa(sala):
        sujeira_espontanea(sala)
        hold = robo
        comandos = gulo_oni(sala, robo)
        counter = 0

        while counter < len(comandos):
            comando_atual = comandos[counter]
            if comando_atual == "limpar":
                sala[robo] = '0'
                break
            elif comando_atual in ['esquerda', 'direita']:
                robo = mover_robo(robo, comando_atual, qnt_salas)

            counter += 1
            print_salas("Full", sala, robo)
            time.sleep(1)

    print("limpou")

def modo_guloso(sala, robo, qnt_salas):
    print_salas("Full", sala, robo)

    while not limpa(sala):
        hold = robo
        comandos = gulo_oni(sala, robo)
        counter = 0

        while counter < len(comandos):
            comando_atual = comandos[counter]
            if comando_atual == "limpar":
                sala[robo] = '0'
                break
            elif comando_atual in ['esquerda', 'direita']:
                robo = mover_robo(robo, comando_atual, qnt_salas)

            counter += 1
            print_salas("Full", sala, robo)
            time.sleep(1)

    print("limpou")


def modo_guloso_com_apagao_unico(sala, robo, qnt_salas):
    ciclo = 0
    apagao_ocorreu = False  # Variável de controle para o apagão
    print_salas("Full", sala, robo)

    while not limpa(sala):
        if ciclo % 7 == 0 and ciclo != 0 and not apagao_ocorreu:  # Apagão acontece apenas uma vez
            print("Apagão! O robô está desorientado.")
            apagao_ocorreu = True  # Marca que o apagão já ocorreu
            while robo > 0:  # Move-se todo para a esquerda
                robo = mover_robo(robo, 'esquerda', qnt_salas)
                print_salas("Full", sala, robo)
                time.sleep(1)

        sujeira_espontanea(sala)
        hold = robo
        comandos = gulo_oni(sala, robo)
        counter = 0

        while counter < len(comandos):
            comando_atual = comandos[counter]
            if comando_atual == "limpar":
                sala[robo] = '0'
                break
            elif comando_atual in ['esquerda', 'direita']:
                robo = mover_robo(robo, comando_atual, qnt_salas)

            counter += 1
            print_salas("Full", sala, robo)
            time.sleep(1)
            ciclo += 1  # Incrementa o contador de ciclos

    print("limpou")

# Etapa de INICIALIZAÇÃO
while True:
    qnt_salas = int(input("Quantas salas? (máximo 10) "))
    if 1 <= qnt_salas <= 10:
        break
    print("Número inválido de salas. Por favor, escolha entre 1 e 10.")

while True:
    qnt_sujeira = int(input("Quantas sujas? (não mais que o número de salas) "))
    if 1 <= qnt_sujeira <= qnt_salas:
        break
    print("Número inválido de sujeira. Por favor, escolha entre 1 e o número de salas.")

sala = ['0' for _ in range(qnt_salas)]
aux = aleatorio(qnt_sujeira, 0, qnt_salas - 1)

# Inicializa SUJEIRA
for i in aux:
    sala[i] = '1'

# Inicializa O ROBO
robo = random.randint(0, qnt_salas - 1)

# Escolha do Modo
modo = input("Escolha o modo (guloso, guloso_com_sujeira, guloso_com_apagao): ")

if modo == 'guloso':
    modo_guloso(sala, robo, qnt_salas)
elif modo == 'guloso_com_sujeira':
    modo_guloso_observavel_com_sujeira_espontanea(sala, robo, qnt_salas)
elif modo == 'guloso_com_apagao':
    modo_guloso_com_apagao_unico(sala, robo, qnt_salas)
else:
    print("Modo inválido.")